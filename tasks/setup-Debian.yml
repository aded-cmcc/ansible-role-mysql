---
- name: Check if MySQL is already installed.
  stat: path=/etc/init.d/mysql
  register: mysql_installed

- name: Update apt cache if MySQL is not yet installed.
  apt: update_cache=yes
  when: not mysql_installed.stat.exists

- name: Ensure MySQL Python libraries are installed.
  apt:
    name: "{{ mysql_python_package_debian }}"
    state: present

- name: Ensure MySQL packages are installed.
  apt:
    name: "{{ mysql_packages }}"
    state: present
  register: deb_mysql_install_packages

# Because Ubuntu starts MySQL as part of the install process, we need to stop
# mysql and remove the logfiles in case the user set a custom log file size.
- name: Ensure MySQL is stopped after initial install.
  service: "name={{ mysql_daemon }} state=stopped"
  when: not mysql_installed.stat.exists

## See https://github.com/geerlingguy/ansible-role-mysql/issues/444
- name: Change datadir in /etc/mysql/mariadb.conf.d/50-server.cnf
  lineinfile:
    path: "/etc/mysql/mariadb.conf.d/50-server.cnf"
    regexp: '^datadir'
    line: "datadir = {{ mysql_datadir }}"
  when: not mysql_installed.stat.exists

## See https://github.com/geerlingguy/ansible-role-mysql/issues/399
- name: "Check whether {{ mysql_datadir }} exist."
  stat:
    path: "{{ mysql_datadir }}/mysql"
  register: mysql_folder_stat
  when: mysql_datadir != "/var/lib/mysql"
- name: "Synchronize /var/lib/mysql content to {{ mysql_datadir }}"
  ansible.posix.synchronize:
    src: "/var/lib/mysql/."
    dest: "{{ mysql_datadir }}"
    perms: yes
  delegate_to: "{{ inventory_hostname }}"
  when: mysql_datadir != "/var/lib/mysql" and mysql_folder_stat.stat.exists == False
  notify: restart mysql

## We finally remove /var/lib/mysql if it isn't the datadir
- name: Remove old datadir if required
  file:
    path: /var/lib/mysql
    state: absent
  when: mysql_datadir != "/var/lib/mysql"

- name: Delete innodb log files created by apt package after initial install.
  file: path={{ mysql_datadir }}/{{ item }} state=absent
  with_items:
    - ib_logfile0
    - ib_logfile1
  when: not mysql_installed.stat.exists
